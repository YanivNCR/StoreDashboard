@using StoreDashboard.Model
@using StoreDashboard.BusinessComponents
@page "/dashboard"

<div class="jumbotron text-left">
    <h1>Store Dashboard</h1>
    <p>Welcome to store dashboard</p>
</div>

<div class="container">
    <div class="row">

        @for (int i = 0; i < dashboardItems.Count; i++)
        {
            var dashboardItem = dashboardItems[i];
            @if (i > 0 && i % dashItemsInRow == 0)
            {
                @:</div>
                @:<div class="row dsf">
                
            }

            <div class="col-sm-@(12/ dashItemsInRow)">
                <div class="card">
                    <div class="card-header">Pos Id: @dashboardItem.Pos.Id</div>
                    <div class="card-body">Transaction Id: @dashboardItem.Pos.TransactionId</div>
                    <div class="card-footer">Footer</div>
                </div>
            </div>
        }

        @*@foreach (var dashboardItem in dashboardItems)
        {
            <div class="col-sm-4">
                <div class="card">
                    <div class="card-header">Pos Id: @dashboardItem.Pos.Id</div>
                    <div class="card-body">Transaction Id: @dashboardItem.Pos.TransactionId</div>
                    <div class="card-footer">Footer</div>
                </div>
            </div>

        }*@

    </div>
</div>
@code {
    private IList<DashboardItem> dashboardItems = new List<DashboardItem>();
    private const int dashItemsInRow = 3;

    protected override async Task OnInitializedAsync()
    {
        RenderDashboardItems();
    }
    public void RenderDashboardItems()
    {
        var dashboardBc = new DashboardBusinessComponent();
        dashboardItems = dashboardBc.GetDashboardItems();
    }
}
