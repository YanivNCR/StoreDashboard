@using StoreDashboard.Model
@using StoreDashboard.BusinessComponents
@using System.Globalization
@using BlazorChatSample.Shared
@inject NavigationManager navigationManager
@page "/dashboard"

<div class="jumbotron text-left">
    <div class="container">
        <h1>Store Dashboard</h1>
        <p>Store Data:</p>
        <div class="row">
            <div class="col-md-12 p-2">
                <RadzenChart>
                    <RadzenLineSeries Smooth="@false" Data="@store.Data.RevenueByYearsData["2019"]" CategoryProperty="Date" Title="2019" LineType="LineType.Dashed" ValueProperty="Revenue">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="@false" Data="@store.Data.RevenueByYearsData["2020"]" CategoryProperty="Date" Title="2020" ValueProperty="Revenue">
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
                    <RadzenValueAxis Formatter="@FormatAsUSD">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Revenue in USD" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>

</div>

<div class="container">
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    <div class="row">
        @foreach (var dashboardItem in dashboardItems)
        {
            <div class="col-sm-4">
                <div class="card m-2">
                    <div class="card-header">Pos Id: @dashboardItem.Pos.Id</div>
                    <div class="card-body">
                        <RadzenChart>
                            <RadzenPieSeries Data="@dashboardItem.Pos.Data.QuartersData" Title="Revenue" CategoryProperty="Quarter" ValueProperty="Revenue" />
                        </RadzenChart>
                    </div>
                    <div class="card-footer">Transaction Id: @dashboardItem.Pos.TransactionId</div>
                </div>
            </div>

        }

    </div>
    <div class="top-row px-4">
        @if (chatting)
        {
            <p>You are connected as <b>@username</b></p>
            <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
        }
    </div>

    <div class="content px-4">

        <h1>Blazor SignalR Chat Sample</h1>

        @if (!chatting)
        {
            @* Moved instructions to shared component *@
            //<Instructions />

            <h2>Chat</h2>

            <p>
                Enter your name to start chatting:
            </p>

            <input type="text" maxlength="32" @bind="@username" />
            <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

            @if (message != null)
            {
                <div class="invalid-feedback">@message</div>
                <small id="emailHelp" class="form-text text-muted">@message</small>
            }
        }

        @if (chatting)
        {
            <div id="scrollbox">

                @foreach (var item in messages)
                {
                    <div class="@item.CSS">
                        <div class="user">@item.Username</div>
                        <div class="msg">@item.Body</div>
                    </div>
                }
                <hr />
                <textarea class="input-lg" placeholder="enter your comment" @bind="@newMessage"></textarea>
                <button class="btn btn-default" @onclick="@SendAsync">Send</button>
            </div>
        }
    </div>

</div>
@code {
    private IList<DashboardItem> dashboardItems = new List<DashboardItem>();
    private Store store;
    private const int dashItemsInRow = 3;

    protected override async Task OnInitializedAsync()
    {
        GetStore();
        RenderDashboardItems();
    }
    public void RenderDashboardItems()
    {
        var dashboardBc = new DashboardBusinessComponent();
        dashboardItems = dashboardBc.GetDashboardItems();
    }

    public void GetStore()
    {
        var dashboardBc = new DashboardBusinessComponent();
        store = dashboardBc.GetStoreAsync().Result;
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }

    // flag to indicate chat status
    bool chatting = false;

    // name of the user who will be chatting
    string username = null;

    ChatClient client = null;

    // on-screen message
    string message = null;

    // new message input
    string newMessage = null;

    // list of messages in chat
    List<Message> messages = new List<Message>();

    /// <summary>
    /// Start chat client
    /// </summary>
    async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(username))
        {
            message = "Please enter a name 1";
            return;
        };

        try
        {
            // remove old messages if any
            messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;
            client = new ChatClient(username, baseUrl);
            // add an event handler for incoming messages
            client.MessageReceived += MessageReceived;
            // start the client
            Console.WriteLine("Index: chart starting...");
            await client.StartAsync();
            Console.WriteLine("Index: chart started?");

            chatting = true;
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    /// <summary>
    /// Inbound message
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);
        }

        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (chatting)
        {
            await client.StopAsync();
            client = null;
            message = "chat ended";
            chatting = false;
        }
    }

    async Task SendAsync()
    {
        if (chatting && !string.IsNullOrWhiteSpace(newMessage))
        {
            // send message to hub
            await client.SendAsync(newMessage);
            // clear input box
            newMessage = "";
        }
    }

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        /// <summary>
        /// Determine CSS classes to use for message div
        /// </summary>
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }
}


@code  {


}
